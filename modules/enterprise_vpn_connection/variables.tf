variable "name" {
  type        = string
  description = "Prefix for all OTC resource names"
}

variable "tags" {
  type        = map(string)
  description = "Common tag set for project resources"
  default     = {}
}

variable "vpn_connection_type" {
  type        = string
  description = "The connection type. The value can be policy, static or bgp."
  default     = "static"
}

variable "otc_gateway_id" {
  type        = string
  description = "UUID of the enterprise VPN gateway to be used for this connection."
}

data "opentelekomcloud_enterprise_vpn_gateway_v5" "otc_gateway" {
  id = var.otc_gateway_id
}

variable "otc_gateway_ip_selector" {
  type        = string
  description = "IP Address(es) selector for the enterprise VPN gateway desired to be used for this connection. Values can be \"primary\", \"secondary\" or \"both\"."
  default     = "both"
  validation {
    condition     = contains(["primary", "secondary", "both"], var.otc_gateway_ip_selector)
    error_message = "Value for otc_gateway_ip_selector must be one of \"primary\", \"secondary\" or \"both\"."
  }
}

locals {
  // API behavior here is weird, parameter gateway_ip in opentelekomcloud_enterprise_vpn_connection_v5 expects the UUID if the gateway is public and IP address if the network is private
  // See here for more info: https://docs.otc.t-systems.com/virtual-private-network/api-ref/api_reference_enterprise_edition_vpn/apis_of_enterprise_edition_vpn/vpn_connection/creating_a_vpn_connection.html#request
  otc_gateway_ips_discovered = {
    primary   = try(data.opentelekomcloud_enterprise_vpn_gateway_v5.otc_gateway.eip1[0].id, data.opentelekomcloud_enterprise_vpn_gateway_v5.otc_gateway.access_private_ip_1)
    secondary = try(data.opentelekomcloud_enterprise_vpn_gateway_v5.otc_gateway.eip2[0].id, data.opentelekomcloud_enterprise_vpn_gateway_v5.otc_gateway.access_private_ip_2)
  }
  otc_gateway_ips_selected = var.otc_gateway_ip_selector == "both" ? local.otc_gateway_ips_discovered : { (var.otc_gateway_ip_selector) = local.otc_gateway_ips_discovered[var.otc_gateway_ip_selector] }
}

variable "remote_gateway_addresses" {
  type        = set(string)
  description = "Remote gateway endpoint IPv4 or FQDN addresses."
}

variable "remote_gateway_asn" {
  type        = number
  description = "The BGP ASN number of the remote gateway."
  default     = null
}

variable "remote_subnets" {
  type        = set(string)
  description = "A list of remote subnet CIDR ranges. This parameter must be empty when the attachment_type of the VPN gateway is set to er and vpn_type is set to policy or bgp."
}

variable "psk" {
  type        = string
  description = "IP Addresses for the enterprise VPN gateway of OTC. Will be autogenerated by module if not specified."
  default     = ""
}

variable "ike_policy" {
  type = object({
    authentication_algorithm   = optional(string)
    authentication_method      = optional(string)
    encryption_algorithm       = optional(string)
    dh_group                   = optional(string)
    ike_version                = optional(string)
    lifetime_seconds           = optional(number)
    local_id_type              = optional(string)
    local_id                   = optional(string)
    peer_id_type               = optional(string)
    peer_id                    = optional(string)
    phase_one_negotiation_mode = optional(string)
  })
  description = "IKE (phase 1) policy parameters for the VPN tunnel."
  default     = null
}

variable "ike_policy_dpd" {
  type = object({
    timeout  = optional(number)
    interval = optional(number)
    msg      = optional(string)
  })
  description = "IKE policy dead peer detection (DPD) parameters for the VPN tunnel."
  default     = null
}

variable "ipsec_policy" {
  type = object({
    authentication_algorithm = optional(string)
    encryption_algorithm     = optional(string)
    pfs                      = optional(string)
    lifetime_seconds         = optional(number)
    encapsulation_mode       = optional(string)
    transform_protocol       = optional(string)
  })
  description = "IPSec (phase 2) policy parameters for the VPN tunnel."
  default     = null
}

variable "policy_rules" {
  type = list(object({
    rule_index  = optional(number)
    destination = optional(string)
    source      = optional(list(string))
  }))
  description = "Policy based routing policy parameters for the VPN tunnel."
  default     = []
  validation {
    condition     = length(distinct(var.policy_rules[*].rule_index)) == length(var.policy_rules) || !can(coalesce(var.policy_rules[*].rule_index))
    error_message = "Each policy rule must have a unique rule_index or rule_index should be left unset. OTC recommends leaving rule_index parameter unset."
  }
}
